{"version":3,"sources":["gyglog/GygLog.js"],"names":["require","Stackify","GyGLog","logInit","logFormatter","options","UtilityHelper","padRight","level","toUpperCase","timestamp","message","meta","length","Date","format","stackify","start","apiKey","config","gygLogSettings","appName","env","filePath","logFile","fileLogger","winston","Logger","transports","DailyRotateFile","dirname","filename","datePattern","maxsize","localTime","prepend","eLogLevel","silly","createTree","colorize","prettyPrint","json","formatter","stackifyLogger","storage","writeLog","logLevel","uniqueId","maskPasswordValue","isLogToFile","isLogToStackify","threshold","log","writeExitLog","methodName","request","response","SuccessFailMessage","error","info","replace","err","warn","verbose","debug","module","exports"],"mappings":"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","file":"GygLog.js","sourcesContent":["/**\n * GyGLog : logger helper class\n */\n\n'use strict';\n\nimport moment from 'moment';\nimport winston from 'winston';\nimport stackify from 'stackify-logger';\nimport config from '../config/environment';\nimport UtilityHelper from '../api/UtilityHelper';\n\nrequire('winston-daily-rotate-file');\nrequire('winston-stackify').Stackify;\n\nclass GyGLog {\n    // { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 }\n    static eLogLevel = {\n        error: 'error',\n        warn: 'warn',\n        info: 'info',\n        verbose: 'verbose',\n        debug: 'debug',\n        silly: 'silly'\n    };\n    static fileLogger;\n    static stackifyLogger;\n\n    /* Init stackify object and logger objects */\n    static logInit() {\n        const logFormatter = function (options) {\n            // Return string will be passed to logger.\n            return '[' + UtilityHelper.padRight(options.level.toUpperCase(), ' ', 5) + '][' + options.timestamp() + ']- ' +\n                (options.message ? options.message : '') +\n                (options.meta && Object.keys(options.meta).length ? '\\n\\t' + JSON.stringify(options.meta) : '' );\n        };\n\n        const timestamp = function () {\n            return moment(new Date()).format('YYYY-MM-DD hh:mm:ss.SSSSSS');\n        };\n\n        stackify.start({\n            apiKey: config.gygLogSettings.stackify.apiKey,\n            appName: \"GYGAPI\",\n            env: config.gygLogSettings.stackify.env\n        });\n\n        var filePath = config.gygLogSettings.logFile.filePath;\n        this.fileLogger = new (winston.Logger)({\n            transports: [\n                new (winston.transports.DailyRotateFile)({\n                    dirname: filePath,\n                    filename: './log',\n                    datePattern: 'yyyy-MM-dd-HH.',\n                    maxsize: '5242880',  //5MB\n                    localTime: true,\n                    prepend: true,\n                    level: this.eLogLevel.silly,\n                    createTree: true,\n                    colorize: true,\n                    prettyPrint: true,\n                    json: false,\n                    timestamp: timestamp,\n                    formatter: logFormatter\n                })\n            ]\n        });\n\n        this.stackifyLogger = new (winston.Logger)({\n            transports: [\n                new (winston.transports.Stackify)({\n                    storage: stackify,\n                    level: this.eLogLevel.silly,\n                    colorize: true,\n                    prettyPrint: true,\n                    timestamp: timestamp,\n                    formatter: logFormatter\n                })\n            ]\n        });\n    }\n\n    /* Write log to file and/or stackify */\n    static writeLog(logLevel, uniqueId, message) {\n        message = GyGLog.maskPasswordValue(message);\n        let isLogToFile = false;\n        let isLogToStackify = false;\n        if (config.gygLogSettings.logFile.threshold && config.gygLogSettings.logFile.threshold.toUpperCase() === 'ON') {\n            isLogToFile = true;\n        }\n        if (config.gygLogSettings.stackify.threshold && config.gygLogSettings.stackify.threshold.toUpperCase() === 'ON') {\n            isLogToStackify = true;\n        }\n\n        if (uniqueId) {\n            if (isLogToFile) {\n                this.fileLogger.log(logLevel, '[' + uniqueId + '] ' + message);\n            }\n            if (isLogToStackify) {\n                this.stackifyLogger.log(logLevel, '[' + uniqueId + '] ' + message);\n            }\n        }\n        else {\n            if (isLogToFile) {\n                this.fileLogger.log(logLevel, message);\n            }\n            if (isLogToStackify) {\n                this.stackifyLogger.log(logLevel, message);\n            }\n        }\n    }\n\n    /* Write log to file and/or stackify */\n    static writeExitLog(logLevel, uniqueId, methodName, request, response) {\n        request = GyGLog.maskPasswordValue(request);\n        response = GyGLog.maskPasswordValue(response);\n        let isLogToFile = false;\n        let isLogToStackify = false;\n        let SuccessFailMessage = \"success...\";\n        if (logLevel === GyGLog.eLogLevel.error)\n            SuccessFailMessage = \"Failed...\";\n\n        if (config.gygLogSettings.logFile.threshold && config.gygLogSettings.logFile.threshold.toUpperCase() === 'ON') {\n            isLogToFile = true;\n        }\n        if (config.gygLogSettings.stackify.threshold && config.gygLogSettings.stackify.threshold.toUpperCase() === 'ON') {\n            isLogToStackify = true;\n        }\n\n        if (uniqueId) {\n            if (isLogToFile) {\n                this.fileLogger.log(logLevel, `[${uniqueId}] [${methodName}] request: ${request}`);\n                this.fileLogger.log(logLevel, `[${uniqueId}] [${methodName}] response: ${response}`);\n                this.fileLogger.log(GyGLog.eLogLevel.info, `[${uniqueId}] Exiting [${methodName}] ${SuccessFailMessage}`);\n            }\n            if (isLogToStackify) {\n                this.stackifyLogger.log(logLevel, `[${uniqueId}] [${methodName}] request: ${request}`);\n                this.stackifyLogger.log(logLevel, `[${uniqueId}] [${methodName}] response: ${response}`);\n                this.stackifyLogger.log(GyGLog.eLogLevel.info, `[${uniqueId}] Exiting [${methodName}] ${SuccessFailMessage}`);\n            }\n        }\n        else {\n            if (isLogToFile) {\n                this.fileLogger.log(logLevel, message);\n            }\n            if (isLogToStackify) {\n                this.stackifyLogger.log(logLevel, message);\n            }\n        }\n    }\n\n\n    static maskPasswordValue(message) {\n        try {\n            //Sample matching log \"Password\":null\n            message = message.replace(/\"password\":null/i, '\"password\":\"######\"');\n            //Sample matching log \"Password\":\"123456\"\n            message = message.replace(/\\s*\"Password\"\\s*:\\s*(.+?)\\s*\"/i, '\"password\":\"######\"');\n            //Sample matching log \"Password\"=\"123456\"\n            message = message.replace(/\\s*\"Password\"\\s*=\\s*(.+?)\\s*\"/i, '\"password\"=\"######\"');\n            //Sample matching log Password=123456; (e.g. in connection string)\n            message = message.replace(/\\s*Password\\s*=\\s*(.+?)\\s*(;|\\s|$)/i, 'password=######');\n            return message;\n        }\n        catch (err) {\n            return message;\n        }\n    }\n}\n\n// export the class\nmodule.exports = GyGLog;\n"]}