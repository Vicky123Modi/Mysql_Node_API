{"version":3,"sources":["api/controller/thing.controller.js"],"names":["index","show","req","res","next","uniqueId","methodName","GyGLog","writeLog","eLogLevel","debug","Thing","findAll","then","getAllThings","info","writeExitLog","status","httpResponseCode","statusCode","Success","json","catch","error","stack","toString","request","id","params","find","where","_id","response"],"mappings":"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","file":"thing.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/things              ->  index\n * POST    /api/things              ->  create\n * GET     /api/things/:id          ->  show\n */\n\nimport {Thing} from '../../sqldb/index';\nimport {getUid} from \"../../commonHelper/index\";\nimport GyGLog from \"../../gyglog/GygLog\";\nimport httpResponseCode from \"../../commonHelper/httpResponseStatusHelper\";\n\n// Gets a list of Things\nexport function index(req, res, next) {\n    const uniqueId = getUid();\n    const methodName = 'GET /api/things';\n    try {\n        GyGLog.writeLog(GyGLog.eLogLevel.debug, uniqueId, `${methodName} Entering...`);\n        Thing.findAll().then((getAllThings) => {\n            GyGLog.writeLog(GyGLog.eLogLevel.info, uniqueId, `getAllThings DB: ${JSON.stringify(getAllThings)}`);\n            if (getAllThings) {\n                GyGLog.writeExitLog(GyGLog.eLogLevel.info, uniqueId, methodName, \"GET\", JSON.stringify(getAllThings));\n                return res.status(httpResponseCode.statusCode.Success).json(getAllThings);\n            }\n        }).catch((error) => {\n            GyGLog.writeExitLog(GyGLog.eLogLevel.error, uniqueId, methodName, \"GET\", error.stack.toString());\n            next(error);\n        });\n    } catch (error) {\n        GyGLog.writeExitLog(GyGLog.eLogLevel.error, uniqueId, methodName, \"GET\", error.stack.toString());\n        next(error);\n    }\n}\n\n// Gets a single Thing from the DB\nexport function show(req, res, next) {\n    const uniqueId = getUid();\n    const methodName = 'GET /api/things';\n    let request = {\n        id: req.params.id\n    };\n    GyGLog.writeLog(GyGLog.eLogLevel.debug, uniqueId, `${methodName} Entering...`);\n    GyGLog.writeLog(GyGLog.eLogLevel.debug, uniqueId, `${methodName} request...${request}`);\n    try {\n        return Thing.find({\n            where: {\n                _id: req.params.id\n            }\n        }).then((response) => {\n            GyGLog.writeLog(GyGLog.eLogLevel.info, uniqueId, `response DB: ${JSON.stringify(response)}`);\n            if (response) {\n                GyGLog.writeExitLog(GyGLog.eLogLevel.info, uniqueId, methodName, \"GET\", JSON.stringify(response));\n                return res.status(httpResponseCode.statusCode.Success).json(response);\n            }\n        }).catch((error) => {\n            GyGLog.writeExitLog(GyGLog.eLogLevel.error, uniqueId, methodName, \"GET\", error.stack.toString());\n            next(error);\n        });\n    } catch (error) {\n        GyGLog.writeExitLog(GyGLog.eLogLevel.error, uniqueId, methodName, \"GET\", error.stack.toString());\n        next(error);\n    }\n}\n"]}